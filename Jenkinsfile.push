pipeline {
    agent {
        label 'az-plug' 
    }

    environment {
        DISCORD_WEBHOOK = credentials('discord-webhook') // –ü—ñ–¥—Å—Ç–∞–≤–ª—è—î–º–æ —Å–µ–∫—Ä–µ—Ç
    }

    options {
        ansiColor('xterm')
        timestamps()
        timeout(time: 30, unit: 'MINUTES')
        buildDiscarder(logRotator(numToKeepStr: '5'))
    }

    stages {
        stage('üîç USE ') {
            steps {
                node('az-plug') {
                    sh '''
                        which az || {
                            echo "Installing Azure CLI..."
                            curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
                            echo "Azure CLI installed successfully"
                        }
                    '''
                    git url: 'https://github.com/voutuk/OLX_Dyplom_ADM', branch: 'main'
                    sh 'ls -la'
                    withCredentials([azureServicePrincipal('az-service-principal')]) {
                        sh 'az login --service-principal -u $AZURE_CLIENT_ID -p $AZURE_CLIENT_SECRET -t $AZURE_TENANT_ID'
                        sh 'az acr build --registry gosellsquarevervet --resource-group gosell-storage --image olx-client:latest --file ./OLX.Frontend/Dockerfile ./OLX.Frontend/'
                        sh 'az acr build --registry gosellsquarevervet --resource-group gosell-storage --image olx-api:latest --file ./OLX.API/Dockerfile ./OLX.API/'
                    }
                }
                step([$class: 'GitHubCommitStatusSetter',
                     statusResultSource: [$class: 'ConditionalStatusResultSource',
                     results: [[$class: 'AnyBuildResult', 
                               message: 'Pipeline Proceeded', 
                               state: 'PENDING']]]])
            }
        }             
    }

    post {
        success {
            discordSend(
                description: "‚úÖ Build #${env.BUILD_NUMBER} —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!",
                footer: "Jen / BublikDEV",
                link: env.BUILD_URL,
                result: "üü¢ SUCCESS",
                title: env.JOB_NAME,
                webhookURL: DISCORD_WEBHOOK
            )
            step([$class: 'GitHubCommitStatusSetter',
                         statusResultSource: [$class: 'ConditionalStatusResultSource',
                         results: [[$class: 'AnyBuildResult', 
                                   message: 'Deployed', 
                                   state: 'SUCCESS']]]])
        }
        failure {
            discordSend(
                description: "‚ùå Build #${env.BUILD_NUMBER} –ø—Ä–æ–≤–∞–ª–∏–≤—Å—è!",
                footer: "Jen / BublikDEV",
                link: env.BUILD_URL,
                result: "üî¥ FAILURE",
                title: env.JOB_NAME,
                webhookURL: DISCORD_WEBHOOK
            )
            step([$class: 'GitHubCommitStatusSetter',
                         statusResultSource: [$class: 'ConditionalStatusResultSource',
                         results: [[$class: 'AnyBuildResult', 
                                   message: 'Failed', 
                                   state: 'FAILURE']]]])
        }
        unstable {
            discordSend(
                description: "‚ö†Ô∏è Build #${env.BUILD_NUMBER} –Ω–µ—Å—Ç–∞–±—ñ–ª—å–Ω–∏–π!",
                footer: "Jen / BublikDEV",
                link: env.BUILD_URL,
                result: "üü° UNSTABLE",
                title: env.JOB_NAME,
                webhookURL: DISCORD_WEBHOOK
            )
            step([$class: 'GitHubCommitStatusSetter',
                         statusResultSource: [$class: 'ConditionalStatusResultSource',
                         results: [[$class: 'AnyBuildResult', 
                                   message: 'Unstable',
                                   state: 'FAILURE']]]]) 
        }
        always {
            cleanWs()
        }
    }
}
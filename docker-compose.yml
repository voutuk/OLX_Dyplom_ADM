networks:
  myAppNetwork:
    driver: bridge

services:
  postgresServerDb:
    profiles: ['db-only', 'full', "back"]
    container_name: postgresDB
    image: postgres:latest
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=olxapi
      - POSTGRES_PASSWORD=*dmUntdOidd3d_#WTi4B9ZoZp%rSDj4Imds07djc*
      - POSTGRES_DB=olxDb
    networks:
      - myAppNetwork
    volumes:
      - ./postgres-data:/var/lib/postgresql/data
    deploy:
      restart_policy:
        condition: on-failure
        max_attempts: 5

  app:
    profiles: ['api-only', 'full', "back"]
    container_name: olx_container
    build:
      context: ./OLX.API
      dockerfile: Dockerfile
    image: voutuk/olx-api
    volumes:
      - ./images:/app/uploading
    ports:
      - "3000:8080"
    networks:
     - myAppNetwork
    depends_on:
      - postgresServerDb
    deploy:
      restart_policy:
        condition: on-failure
        max_attempts: 5
  
  client:
    profiles: ['client-only', 'full', "front"]
    container_name: olx_client_container
    build:
      context: ./OLX.Frontend
      dockerfile: Dockerfile.stage
    image: voutuk/olx-client
    restart: on-failure
    ports:
      - "80:80"

  app-prod:
    profiles: ['prod']
    container_name: olx_container
    build:
      context: ./OLX.API
      dockerfile: Dockerfile
    image: voutuk/olx-api:latest
    volumes:
      - ./images:/app/uploading
    ports:
      - "3000:8080"
    networks:
     - myAppNetwork
    depends_on:
      - postgresServerDb
    deploy:
      restart_policy:
        condition: on-failure
        max_attempts: 5

  client-prod:
    profiles: ['prod']
    container_name: olx_client_container
    build:
      context: ./OLX.Frontend
      dockerfile: Dockerfile
    image: voutuk/olx-client:latest
    restart: on-failure
    ports:
      - "80:80"